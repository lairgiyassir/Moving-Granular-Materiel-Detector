# -*- coding: utf-8 -*-
"""Projet TB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bstLYkqSKcamOOCRJGg2zhvn5w5A8jJ9
"""

import numpy as np
import matplotlib.pyplot as plt 
from scipy import ndimage 
import cv2


def length_video(video):
  '''
  calculates the number of frames in a video
  
  Parameters : 
  video : input video

  Returns : 
  length : number of frames it contains
  '''
  length = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
  return length


def extract_and_process_all_frames(video):
  '''
  extracts and process all the frames from a video

  Parameters : 
  video : input video 

  Returns : 
  L : list of processed frames
  '''
  n = length_video(video)
  L= []
  for i in range(n):
    # Extracting the frames
    ret, frame = video.read()

    # Extracting the ROI
    frame = frame[700:800,55:1800]

    # Converting to gray scale and performs an automatic thresholding
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    _ , img = cv2.threshold(image, 0,  255, cv2.THRESH_OTSU)

    # Extracting only the region of the liquid
    img = img[42:62,:]

    # Removing the artifacts
    kernel = np.ones((5,5))
    img = ndimage.binary_opening(img, structure=kernel)
    L.append(img)
  return L


"""# Pixel counting of the slug's height"""

def pixel_counting(image): 
  '''
  The function calculates the thickness of slugs along the x-axis

  Parameters : 
  image(array) : processed image 

  Returns : 
  list of thichness values along the tube direction
  '''
  #n,p = image.shape
  #M = np.zeros((1,p))
  
  #for i in range(p):
   # M[:,i] =np.sum(image[:,i])
                   
  return np.sum(image, axis=0)



"""# Creating the SpatioTemprals"""

def count_and_merge(frames):
  '''
  In each frame, the function calculates the heights of the slugs along the tube-axis and merge the 1D-arrays to create a final spatio-temporal in gray scale

  Parameters : 
  frames (list of arrays): list of processed frames

  Returns : 
  merged (2D array) : spatio-temporal in grayscale 
  '''
  # Pixel counting of each frame of the processed frames
  counted = list(map(pixel_counting, frames))
  # Merging
  tup = tuple(counted)
  merged = np.vstack(tup)
  # to have a better contrasted image, we have multiplied all the pixels by 15
  return merged*15



def main():
    print('------------- Extracting and processing the frames-----------------')
    video = cv2.VideoCapture('/content/drive/MyDrive/Projet TB1/V_20200630_112727_N0.mp4')
    frames = extract_and_process_all_frames(video)
    print('------------------------- DONE-------------------------------------')

    print('------ Creating the Spatio Temporal Count and Merge ---------------')
    spatio_temporal = count_and_merge(frames)
    print('------------------------- DONE-------------------------------------')

    print('--------------- Saving the spatio_temporal ------------------------')
    cv2.imwrite('spatio_temporal_main.png', spatio_temporal)
    print('------------------------- DONE-------------------------------------')
    
    fig = plt.figure(figsize=(40,20))
    ax = fig.add_subplot(111)

    ax.imshow(spatio_temporal, cmap='gray')
    ax.set_xlabel('x-axis of the tube')
    ax.set_ylabel('Time (each unit is 0.04 second in this case)')

    plt.show()
    
main()